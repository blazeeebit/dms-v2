// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId   String   @unique
  role      Role
  name      String
  username  String?
  image     String?
  language  Language @default(ENGLISH)
  address   String?
  country   String?
  phone     String?
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  banned    Boolean  @default(false)

  owner   Owner[]
  student Student[]
}

model Owner {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  stripeId String?
  User     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String? @unique @db.Uuid

  subscription Subscription?

  dorms Dormitories[]
}

model Student {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  studentId      Int?
  department     String?
  User           User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?   @unique @db.Uuid
  message        Message[]
  online         Boolean   @default(false)
  reservationsId String?   @db.Uuid
}

model Subscription {
  id      String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  plan    Plan    @default(STANDARD)
  credits Int     @default(10)
  Owner   Owner?  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String? @unique @db.Uuid
}

model Dormitories {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  featuredImage String
  gallery       Gallery[]
  location      String?
  Owner         Owner?    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId       String?   @db.Uuid

  active Boolean @default(false)

  transaction Transactions[]

  bookingPlan BookingPlan[]
  rooms       Room[]
  review      Review[]

  language DormitoriesLanguage[]
  service  Service[]
}

model DormitoriesLanguage {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  description   String
  language      Language     @default(ENGLISH)
  Dormitories   Dormitories? @relation(fields: [dormitoriesId], references: [id], onDelete: Cascade)
  dormitoriesId String?      @db.Uuid
}

model Service {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  icon          String
  rating        Rating[]
  Dormitories   Dormitories? @relation(fields: [dormitoriesId], references: [id], onDelete: Cascade)
  dormitoriesId String?      @db.Uuid
}

model Services {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String @unique
  icon String
}

model Filters {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String @unique
  icon String
}

model Message {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  message    String
  createdAt  DateTime @default(now())
  Student    Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId  String?  @db.Uuid
  recieverId String   @db.Uuid
}

model Gallery {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  image         String
  Dormitories   Dormitories? @relation(fields: [dormitoriesId], references: [id], onDelete: Cascade)
  dormitoriesId String?      @db.Uuid
}

model BookingPlan {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  price         String
  period        DateTime
  Dormitories   Dormitories? @relation(fields: [dormitoriesId], references: [id], onDelete: Cascade)
  dormitoriesId String?      @db.Uuid
}

model Reservations {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  students  String
  createdAt DateTime @default(now())
  Room      Room?    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId    String?  @db.Uuid
}

model Rented {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  student   String
  createdAt DateTime @default(now())
  Room      Room?    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId    String?  @db.Uuid
}

model Room {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type          String
  price         String
  Dormitories   Dormitories?   @relation(fields: [dormitoriesId], references: [id], onDelete: Cascade)
  dormitoriesId String?        @db.Uuid
  reservations  Reservations[]
  rented        Rented[]
}

model Review {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  review        String
  createdAt     DateTime     @default(now())
  studentId     String?      @db.Uuid
  Dormitories   Dormitories? @relation(fields: [dormitoriesId], references: [id], onDelete: Cascade)
  dormitoriesId String?      @db.Uuid
}

model Rating {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rating    Int      @default(0)
  Service   Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId String?  @db.Uuid
  studentId String   @db.Uuid
}

model Calender {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  calender String
  year     String
}

model Transactions {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount        String
  createdAt     DateTime        @default(now())
  type          TransactionType
  studentId     String          @db.Uuid
  studentName   String
  Dormitories   Dormitories?    @relation(fields: [dormitoriesId], references: [id], onDelete: Cascade)
  dormitoriesId String?         @db.Uuid
}

enum TransactionType {
  BOOKING
  RENTED
}

enum Role {
  ADMIN
  OWNER
  STUDENT
}

enum Plan {
  STANDARD
  PRO
  ULTIMATE
}

enum Language {
  ENGLISH
  TURKISH
}
